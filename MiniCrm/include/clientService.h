#ifndef CLIENTSERVICE_H
#define CLIENTSERVICE_H

#include "charUtils.h"
#include "client.h"
#include "sortAlgorithm.h"
#include <fstream>

/**
 * @brief Выводит детальную информацию о клиенте.
 *
 * Отображает все поля структуры Client в форматированном виде:
 * ФИО, телефон, товар, дата (ДД.ММ.ГГГГ), количество и сумма.
 *
 * @param client Константная ссылка на структуру клиента.
 */
void printClient(const Client &client);

/**
 * @brief Редактирование данных клиента.
 *
 * 1. Ищет клиента по ФИО в файле clients.bin.
 * 2. Позволяет изменить одно из полей:
 *    - Телефон (с проверкой корректности через checkPhoneNum()).
 *    - Товар.
 *    - Дату (с проверкой корректности через setDate()).
 *    - Количество (положительное целое число через checkPositiveNum<int>()).
 *    - Сумму (положительное число с плавающей точкой через checkPositiveNum<double>()).
 * 3. Обновляет запись в файле.
 */
void editClient();

/**
 * @brief Удаление клиента из базы.
 *
 * 1. Ищет клиента по ФИО.
 * 2. Создает временный файл temp.bin без удаляемой записи.
 * 3. Заменяет исходный файл clients.bin временным файлом.
 *
 * @note Требует подтверждения существования файла и наличия данных.
 */
void deleteClient();

/**
 * @brief Сортировка клиентов по названию товара.
 *
 * 1. Считывает всех клиентов из файла clients.bin в массив.
 * 2. Сортирует массив структур Client алгоритмом быстрой сортировки (sortQuickProduct).
 * 3. Перезаписывает файл clients.bin отсортированными данными.
 */
void sortClientsByProduct();

/**
 * @brief Сортировка клиентов по дате.
 *
 * 1. Считывает всех клиентов из файла clients.bin в массив.
 * 2. Сортирует массив структур Client алгоритмом сортировки выбором (sortSelection).
 * 3. Перезаписывает файл clients.bin отсортированными данными.
 */
void sortClientsByData();

/**
 * @brief Сортировка клиентов по ФИО.
 *
 * 1. Считывает всех клиентов из файла clients.bin в массив.
 * 2. Сортирует массив структур Client алгоритмом сортировки вставками (sortInsertion).
 * 3. Перезаписывает файл clients.bin отсортированными данными.
 */
void sortClientsByName();

/**
 * @brief Генерация случайных клиентов.
 *
 * 1. Запрашивает количество клиентов для генерации.
 * 2. Создает клиентов со случайными данными:
 *    - ФИО (из предопределенных списков имен, фамилий и отчеств).
 *    - Телефон (формат: "9XXXXXXXXX").
 *    - Товар (из предопределенного списка).
 *    - Дата (диапазон: 2000-2023 гг.).
 *    - Количество (1-100).
 *    - Сумма (100.00-10000.00).
 * 3. Сохраняет сгенерированных клиентов в файл clients.bin.
 */
void generateRandomClient();

/**
 * @brief Установка даты для клиента.
 *
 * 1. Запрашивает дату у пользователя в формате ДД.ММ.ГГГГ, ДД/ММ/ГГГГ или ДД-ММ-ГГГГ.
 * 2. Проверяет корректность даты через isValidDate().
 * 3. Парсит дату в поля day/month/year структуры Client через parseDate().
 *
 * @param client Ссылка на структуру для сохранения даты.
 */
void setDate(Client &client);

/**
 * @brief Добавление нового клиента.
 *
 * Пошагово запрашивает все поля клиента:
 * - ФИО (до 100 символов).
 * - Телефон (с проверкой корректности через checkPhoneNum()).
 * - Товар (до 100 символов).
 * - Дата (с проверкой корректности через setDate()).
 * - Количество (положительное целое число через checkPositiveNum<int>()).
 * - Сумма (положительное число с плавающей точкой через checkPositiveNum<double>()).
 *
 * Сохраняет данные в файл clients.bin.
 */
void addClient();

/**
 * @brief Выводит количество клиентов в базе данных.
 *
 * 1. Открывает файл clients.bin в бинарном режиме.
 * 2. Определяет количество записей через размер файла.
 * 3. Выводит результат в консоль.
 */
void getCountClient();

#endif